heat_template_version: 2013-05-23
description: ursula test environment

parameters:
  image_name:
    type: string
    label: image name
    default: ubuntu-12.04
  flavor_name:
    type: string
    label: flavor name
    default: m1.tiny
  key_name:
    type: string
    label: key name
  private_net_id:
    type: string
    label: private network id
    default: ba0fdd03-72b5-41eb-bb67-fef437fd6cb4
  private_subnet_id:
    type: string
    label: private network id
    default: 8fb66dc4-d9f8-47eb-9679-85d7672ad37e
  public_net_id:
    type: string
    label: public network id
    default: 06dc9d5a-f55a-410d-a7fd-4c7cb34ad927
  volume_size:
    type: number
    label: volume size (GB)
    default: 1

resources:
  ping_and_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - { protocol: icmp, port_range_min: 0, port_range_max: 255}
        - { protocol: tcp, port_range_min: 22, port_range_max: 22}


{% for vm in vms %}

  {{ vm.name }}:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      networks:
        - port: { get_resource: {{ vm.name }}_port }
  {{ vm.name }}_port:
    type: OS::Neutron::Port
    properties:
      fixed_ips: [ { subnet_id: { get_param: private_subnet_id } } ]
      network_id: { get_param: private_net_id }
      security_groups: [ { get_resource: ping_and_ssh } ]
  {{ vm.name }}_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: {{ vm.name }}_port }

{% if vm.volume %}
  {{ vm.name }}_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }
  {{ vm.name }}_volume_attachment:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: {{ vm.name }} }
      volume_id: { get_resource: {{ vm.name }}_volume }
      mountpoint: /dev/sdb
{% endif %}
{% endfor %}

outputs
  # output public ip for each instance:

  {% for vm in vms %}
  {{ vm.name }}_ip:
    description: {{ vm.name }} floating ip address
    value: { get_attr: [ {{ vm.name }}_floating_ip, floating_ip_address ] }
  {% endfor %}
